---
import Button from "../components/Button.astro";
---

<header class="fixed backdrop-blur-lg z-50 transparent border-b border-transparent w-full lg:mt-10 overflow-hidden">
    <section class="flex justify-between items-center w-full max-w-[1515px] mx-auto mt-0">
        <div id="menu-toggle" class="lg:hidden">
            <div class="bar-1"></div>
            <div class="bar-2"></div>
            <div class="bar-3"></div>
        </div>
        <div class="menu">
            <nav>
                <ul class="flex gap-10 xl:gap-14 text-lg xl:text-xl">
                    <li><a href="#experience"><img src="/svg/experience.svg" alt="Experience Icon" />Experience</a></li>
                    <li><a href="#projects"><img src="/svg/projects.svg" alt="Projects Icon" />Projects</a></li>
                    <li><a href="#education"><img src="/svg/skills.svg" alt="Education Icon" />Education</a></li>
                    <li><a href="#contact"><img src="/svg/contact.svg" alt="Contact Icon" />Contact</a></li>
                </ul>
            </nav>
        </div>
        <Button content="Download Resume" url="/resume.pdf" download="Luis Arzola Resume" />
    </section>
</header>

<style>
    ul li a {
        display: flex;
        gap: 8px;
    }
    ul li {
        opacity: 0.6;
        transition: 0.3s all ease;
    }
    ul li:hover {
        opacity: 1;
    }
    ul li.active {
        opacity: 1;
    }
    header {
        transition: 0.3s all ease;
        padding: 16px;
    }
    header.scrolled {
        background-color: rgb(49 43 58 / 0.9);
        border-color: rgb(214 191 246 / 0.35);
        margin-top: 0;
    }
    #menu-toggle {
        display: none;
        flex-direction: column;
        gap: 8px;
        cursor: pointer;
        z-index: 999;
    }
    #menu-toggle div {
        width: 30px;
        height: 2px;
        background-color: #fff;
        transition: 0.3s all ease;
    }

    .change .bar-1 {
        transform: translate(0, 10px) rotate(-45deg);
    }

    .change .bar-2 {
        opacity: 0;
        visibility: hidden;
    }
    .change .bar-3 {
        transform: translate(0, -10px) rotate(45deg);
    }
    @media screen and (max-width: 1600px) {
        header {
            padding: 16px 0px;
        }
    }
    @media screen and (max-width: 1024px) {
        #menu-toggle {
            display: flex;
        }
        header {
            padding: 20px 0px;
        }
        .menu {
            transition: 0.5s all ease;
        }
        .menu {
            position: absolute;
            width: 100%;
            height: 100vh;
            top: 0;
            left: 100%;
            background-color: rgba(34, 29, 41, 0.925);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .menu ul {
            flex-direction: column;
            align-items: center;
        }
        .left-0 {
            left: 0;
        }
    }
    .no-transition {
        transition: none !important;
    }
</style>

<script>
    const header = document.querySelector("header") as HTMLElement;
    const menuItems = document.querySelectorAll("ul li a");

    if (window.scrollY > 50) {
        header.classList.add("scrolled");
        header.style.transition = "none";
    } else {
        header.classList.remove("scrolled");
        header.style.transition = ".3s all ease";
    }

    document.addEventListener("DOMContentLoaded", () => {
        window.addEventListener("scroll", () => {
            if (window.scrollY > 50) {
                header.classList.add("scrolled");
            } else {
                header.classList.remove("scrolled");
                header.style.transition = ".3s all ease";
            }

            menuItems.forEach((item) => {
                const itemValue = item.getAttribute("href");
                const section = document.querySelector(`section${itemValue}`);

                const observer = new window.IntersectionObserver(([entry]) => {
                    if (entry.isIntersecting) {
                        item.parentElement?.classList.add("active");
                    } else {
                        item.parentElement?.classList.remove("active");
                    }
                });
                if (section) {
                    observer.observe(section);
                }
            });
        });

        const toggleButton = document.querySelector("#menu-toggle");
        const navMenu = document.querySelector(".menu");
        toggleButton?.addEventListener("click", () => {
            toggleButton.classList.toggle("change");
            navMenu?.classList.toggle("left-0");
        });
        navMenu?.querySelectorAll("ul li a")?.forEach((element) => {
            element.addEventListener("click", () => {
                toggleButton?.classList.remove("change");
                navMenu?.classList.remove("left-0");
            });
        });

        menuItems.forEach((item) => {
            item.addEventListener("click", () => {
                console.log("before removing active class");
                menuItems.forEach((item) => {
                    item.parentElement?.classList.remove("active");
                });

                console.log("after removing active class and before adding active class");
                item.parentElement?.classList.add("active");
            });
        });
    });
</script>
